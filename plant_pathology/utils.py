# AUTOGENERATED! DO NOT EDIT! File to edit: nbks/00_utils.ipynb (unless otherwise specified).

__all__ = ['load_data', 'create_folds', 'kaggle_submit_command', 'average_preds', 'save_average_preds']

# Cell
from fastcore.all import *
import pandas as pd
from sklearn.model_selection import StratifiedKFold

# Cell
def load_data(with_folds=True, path_pseudo_labels: str=None) -> (Path, pd.DataFrame):
    path = Path("/home/jupyter/kaggle/plant-pathology/data/plant-pathology-2020/")
    path_train = path/('train_folds.csv' if with_folds else 'train.csv')
    df_train = pd.read_csv(path_train)
    if path_pseudo_labels is not None:
        pseudo_labels = pd.read_csv(path_pseudo_labels)
        df_train = pd.concat([df_train, pseudo_labels], ignore_index=True)
    return path, df_train

# Cell
def create_folds(path: Path, df: pd.DataFrame, prn_stats: bool = False) -> pd.DataFrame:
    df = df.sample(frac=1.0, random_state=42).reset_index(drop=True)
    lbls = df.apply(lambda r: df.columns[r==1].item(), axis=1)

    # Create 5 folds
    kf = StratifiedKFold(n_splits=5)
    for fold, (train_idxs, val_idxs) in enumerate(kf.split(df, lbls.values)):
        print(f"Fold {fold}: {len(train_idxs)/len(df)}, {len(val_idxs)/len(df)}")
        df.loc[val_idxs, "fold"] = fold

    if prn_stats: print(df.groupby("fold").describe())

    # Save to file
    df.to_csv(path/"train_folds.csv", index=False)
    return df

# Cell
def kaggle_submit_command() -> str:
    print("!kaggle competitions submit -c plant-pathology-2020-fgvc7 -f {submission_path} -m 'hi'")

# Cell
def average_preds(path: Path) -> pd.DataFrame:
    dfs = pd.concat([pd.read_csv(f) for f in path.glob("predictions_fold_[0-9].csv")])
    avg_preds = dfs.groupby(dfs.index).mean()
    avg_preds.insert(0, "image_id", dfs["image_id"].unique())
    return avg_preds

# Cell
@call_parse
def save_average_preds(
    path: Param("Path to prediction CSVs", Path)=".",
    name: Param("Name", str)="averaged_predictions.csv",
) -> Path:
    """Average predictions from multiple folds."""
    avg_preds = average_preds(path)
    avg_preds.to_csv(path/name, index=False)
    return path/name